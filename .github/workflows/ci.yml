name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
        exclude:
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xclip \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb1-dev \
          libx11-dev \
          pkg-config \
          libasound2-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install fswatch
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose --all-features
      env:
        RUST_LOG: debug
    
    - name: Run doc tests
      run: cargo test --doc --verbose --all-features
    
    - name: Check documentation
      run: cargo doc --no-deps --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Run cargo-deny
      run: cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: llvm-tools-preview
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xclip \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb1-dev \
          libx11-dev \
          pkg-config \
          libasound2-dev
    
    - name: Install grcov
      run: cargo install grcov
    
    - name: Run tests with coverage
      run: |
        export CARGO_INCREMENTAL=0
        export RUSTFLAGS="-Cinstrument-coverage"
        export LLVM_PROFILE_FILE="klipdot-%p-%m.profraw"
        cargo test --verbose --all-features
        grcov . --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage.lcov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [test, security]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: klipdot
            asset_name: klipdot-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: klipdot
            asset_name: klipdot-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: klipdot
            asset_name: klipdot-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: klipdot
            asset_name: klipdot-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: klipdot.exe
            asset_name: klipdot-windows-x86_64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xclip \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb1-dev \
          libx11-dev \
          pkg-config \
          libasound2-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install fswatch
    
    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --all-features
        
    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
    
    - name: Compress binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        tar -czf ${{ matrix.asset_name }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.artifact_name }}
    
    - name: Compress binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a ${{ matrix.asset_name }}.zip ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.tar.gz
          ${{ matrix.asset_name }}.zip
        if-no-files-found: ignore

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xclip \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb1-dev \
          libx11-dev \
          pkg-config \
          libasound2-dev
    
    - name: Run benchmarks
      run: |
        cargo bench --all-features
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, coverage, benchmark]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release checksums
      run: |
        for file in klipdot-*/*; do
          sha256sum "$file" > "$file.sha256"
        done
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          klipdot-*/*
        body: |
          ## KlipDot Release ${{ github.ref_name }}
          
          Universal terminal image interceptor that automatically intercepts image pastes and file operations, replacing them with file paths for any CLI/TUI application.
          
          ### Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the binary to a directory in your PATH
          4. Run `klipdot install` to set up shell hooks
          5. Start the service with `klipdot start`
          
          ### Changes
          
          See [CHANGELOG.md](https://github.com/KooshaPari/KlipDot/blob/main/CHANGELOG.md) for detailed changes.
          
          ### Checksums
          
          All binaries include SHA256 checksums for verification.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: |
          klipdot/klipdot:latest
          klipdot/klipdot:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max